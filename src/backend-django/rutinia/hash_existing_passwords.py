"""
Script para hashear las contrase√±as de usuarios existentes
Ejecutar una sola vez despu√©s de implementar JWT
"""
import os
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'rutinia.settings')
django.setup()

from django.contrib.auth.hashers import make_password
from core.models import Usuario

def hash_existing_passwords():
    """
    Hashea las contrase√±as de todos los usuarios que tienen contrase√±as en texto plano
    """
    usuarios = Usuario.objects.all()
    
    print(f"üîç Encontrados {usuarios.count()} usuarios")
    
    actualizados = 0
    for usuario in usuarios:
        # Verificar si la contrase√±a ya est√° hasheada
        # Las contrase√±as hasheadas empiezan con prefijos como 'pbkdf2_sha256$'
        if not usuario.clave.startswith('pbkdf2_sha256$'):
            print(f"üìù Hasheando contrase√±a para: {usuario.correo}")
            
            # Guardar la contrase√±a original temporalmente
            password_original = usuario.clave
            
            # Hashear la contrase√±a
            usuario.clave = make_password(password_original)
            usuario.save()
            
            actualizados += 1
        else:
            print(f"‚úÖ Usuario {usuario.correo} ya tiene contrase√±a hasheada")
    
    print(f"\n‚ú® Proceso completado!")
    print(f"‚úÖ {actualizados} contrase√±as actualizadas")
    print(f"‚è≠Ô∏è  {usuarios.count() - actualizados} usuarios ya ten√≠an contrase√±as hasheadas")

if __name__ == '__main__':
    print("=" * 60)
    print("üîê SCRIPT PARA HASHEAR CONTRASE√ëAS EXISTENTES")
    print("=" * 60)
    print("\n‚ö†Ô∏è  ADVERTENCIA: Este script modificar√° las contrase√±as en la BD")
    print("   Solo las contrase√±as en texto plano ser√°n hasheadas")
    print()
    
    respuesta = input("¬øContinuar? (s/n): ")
    
    if respuesta.lower() == 's':
        hash_existing_passwords()
    else:
        print("‚ùå Operaci√≥n cancelada")
