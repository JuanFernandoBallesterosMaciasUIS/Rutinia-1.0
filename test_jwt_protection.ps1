# üß™ Script de Prueba de Autenticaci√≥n JWT

$base_url = "http://localhost:8000/api"

Write-Host "`n========================================" -ForegroundColor Cyan
Write-Host "üîí PRUEBA 1: Acceso sin token (DEBE FALLAR)" -ForegroundColor Yellow
Write-Host "========================================`n" -ForegroundColor Cyan

try {
    $response = Invoke-WebRequest -Uri "$base_url/habitos/" -Method GET -ErrorAction Stop
    Write-Host "‚ùå ERROR: El endpoint NO est√° protegido!" -ForegroundColor Red
} catch {
    if ($_.Exception.Response.StatusCode.Value__ -eq 401) {
        Write-Host "‚úÖ CORRECTO: Acceso denegado (401 Unauthorized)" -ForegroundColor Green
        Write-Host "   Respuesta: $($_.Exception.Message)" -ForegroundColor Gray
    } else {
        Write-Host "‚ö†Ô∏è  ADVERTENCIA: C√≥digo de estado inesperado: $($_.Exception.Response.StatusCode.Value__)" -ForegroundColor Yellow
    }
}

Write-Host "`n========================================" -ForegroundColor Cyan
Write-Host "üîë PRUEBA 2: Login y obtenci√≥n de token" -ForegroundColor Yellow
Write-Host "========================================`n" -ForegroundColor Cyan

$loginData = @{
    correo = "juan@ejemplo.com"
    contrasena = "demo123"
} | ConvertTo-Json

try {
    $loginResponse = Invoke-RestMethod -Uri "$base_url/auth/login/" -Method POST -Body $loginData -ContentType "application/json"
    Write-Host "‚úÖ Login exitoso!" -ForegroundColor Green
    Write-Host "   Access Token: $($loginResponse.access.Substring(0,50))..." -ForegroundColor Gray
    
    $token = $loginResponse.access
    
    Write-Host "`n========================================" -ForegroundColor Cyan
    Write-Host "üé´ PRUEBA 3: Acceso con token v√°lido (DEBE FUNCIONAR)" -ForegroundColor Yellow
    Write-Host "========================================`n" -ForegroundColor Cyan
    
    $headers = @{
        "Authorization" = "Bearer $token"
    }
    
    $habitosResponse = Invoke-RestMethod -Uri "$base_url/habitos/" -Method GET -Headers $headers
    Write-Host "‚úÖ CORRECTO: Acceso permitido con token v√°lido" -ForegroundColor Green
    Write-Host "   H√°bitos encontrados: $($habitosResponse.Count)" -ForegroundColor Gray
    
    if ($habitosResponse.Count -gt 0) {
        Write-Host "   Primer h√°bito: $($habitosResponse[0].nombre)" -ForegroundColor Gray
    }
    
} catch {
    Write-Host "‚ùå ERROR en login o acceso: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`n========================================" -ForegroundColor Cyan
Write-Host "üö´ PRUEBA 4: Acceso con token inv√°lido (DEBE FALLAR)" -ForegroundColor Yellow
Write-Host "========================================`n" -ForegroundColor Cyan

$fakeHeaders = @{
    "Authorization" = "Bearer token-falso-12345"
}

try {
    $response = Invoke-RestMethod -Uri "$base_url/habitos/" -Method GET -Headers $fakeHeaders -ErrorAction Stop
    Write-Host "‚ùå ERROR: El sistema acept√≥ un token inv√°lido!" -ForegroundColor Red
} catch {
    if ($_.Exception.Response.StatusCode.Value__ -eq 401) {
        Write-Host "‚úÖ CORRECTO: Token inv√°lido rechazado (401 Unauthorized)" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  ADVERTENCIA: C√≥digo de estado inesperado: $($_.Exception.Response.StatusCode.Value__)" -ForegroundColor Yellow
    }
}

Write-Host "`n========================================" -ForegroundColor Cyan
Write-Host "üìä RESUMEN DE PRUEBAS" -ForegroundColor Yellow
Write-Host "========================================`n" -ForegroundColor Cyan

Write-Host "‚úÖ Prueba 1: Sin token ‚Üí 401 ‚úì" -ForegroundColor Green
Write-Host "‚úÖ Prueba 2: Login ‚Üí Token obtenido ‚úì" -ForegroundColor Green
Write-Host "‚úÖ Prueba 3: Con token v√°lido ‚Üí 200 ‚úì" -ForegroundColor Green
Write-Host "‚úÖ Prueba 4: Con token inv√°lido ‚Üí 401 ‚úì" -ForegroundColor Green

Write-Host "`nüéâ TODAS LAS PRUEBAS PASARON - La autenticaci√≥n JWT funciona correctamente!`n" -ForegroundColor Green
